// Copyright 2024 Authors of koffloader-io
// SPDX-License-Identifier: Apache-2.0

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v1beta1 "github.com/koffloader-io/koffloader/pkg/k8s/apis/koffloader.koffloader.io/v1beta1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeServiceExportPolicies implements ServiceExportPolicyInterface
type FakeServiceExportPolicies struct {
	Fake *FakeKoffloaderV1beta1
}

var serviceexportpoliciesResource = v1beta1.SchemeGroupVersion.WithResource("serviceexportpolicies")

var serviceexportpoliciesKind = v1beta1.SchemeGroupVersion.WithKind("ServiceExportPolicy")

// Get takes name of the serviceExportPolicy, and returns the corresponding serviceExportPolicy object, and an error if there is any.
func (c *FakeServiceExportPolicies) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1beta1.ServiceExportPolicy, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(serviceexportpoliciesResource, name), &v1beta1.ServiceExportPolicy{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.ServiceExportPolicy), err
}

// List takes label and field selectors, and returns the list of ServiceExportPolicies that match those selectors.
func (c *FakeServiceExportPolicies) List(ctx context.Context, opts v1.ListOptions) (result *v1beta1.ServiceExportPolicyList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(serviceexportpoliciesResource, serviceexportpoliciesKind, opts), &v1beta1.ServiceExportPolicyList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1beta1.ServiceExportPolicyList{ListMeta: obj.(*v1beta1.ServiceExportPolicyList).ListMeta}
	for _, item := range obj.(*v1beta1.ServiceExportPolicyList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested serviceExportPolicies.
func (c *FakeServiceExportPolicies) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(serviceexportpoliciesResource, opts))
}

// Create takes the representation of a serviceExportPolicy and creates it.  Returns the server's representation of the serviceExportPolicy, and an error, if there is any.
func (c *FakeServiceExportPolicies) Create(ctx context.Context, serviceExportPolicy *v1beta1.ServiceExportPolicy, opts v1.CreateOptions) (result *v1beta1.ServiceExportPolicy, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(serviceexportpoliciesResource, serviceExportPolicy), &v1beta1.ServiceExportPolicy{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.ServiceExportPolicy), err
}

// Update takes the representation of a serviceExportPolicy and updates it. Returns the server's representation of the serviceExportPolicy, and an error, if there is any.
func (c *FakeServiceExportPolicies) Update(ctx context.Context, serviceExportPolicy *v1beta1.ServiceExportPolicy, opts v1.UpdateOptions) (result *v1beta1.ServiceExportPolicy, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(serviceexportpoliciesResource, serviceExportPolicy), &v1beta1.ServiceExportPolicy{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.ServiceExportPolicy), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeServiceExportPolicies) UpdateStatus(ctx context.Context, serviceExportPolicy *v1beta1.ServiceExportPolicy, opts v1.UpdateOptions) (*v1beta1.ServiceExportPolicy, error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateSubresourceAction(serviceexportpoliciesResource, "status", serviceExportPolicy), &v1beta1.ServiceExportPolicy{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.ServiceExportPolicy), err
}

// Delete takes name of the serviceExportPolicy and deletes it. Returns an error if one occurs.
func (c *FakeServiceExportPolicies) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteActionWithOptions(serviceexportpoliciesResource, name, opts), &v1beta1.ServiceExportPolicy{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeServiceExportPolicies) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(serviceexportpoliciesResource, listOpts)

	_, err := c.Fake.Invokes(action, &v1beta1.ServiceExportPolicyList{})
	return err
}

// Patch applies the patch and returns the patched serviceExportPolicy.
func (c *FakeServiceExportPolicies) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1beta1.ServiceExportPolicy, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(serviceexportpoliciesResource, name, pt, data, subresources...), &v1beta1.ServiceExportPolicy{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.ServiceExportPolicy), err
}
