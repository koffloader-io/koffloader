// Copyright 2024 Authors of koffloader-io
// SPDX-License-Identifier: Apache-2.0

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v1beta1 "github.com/koffloader-io/koffloader/pkg/k8s/apis/koffloader.koffloader.io/v1beta1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeKClusters implements KClusterInterface
type FakeKClusters struct {
	Fake *FakeKoffloaderV1beta1
}

var kclustersResource = v1beta1.SchemeGroupVersion.WithResource("kclusters")

var kclustersKind = v1beta1.SchemeGroupVersion.WithKind("KCluster")

// Get takes name of the kCluster, and returns the corresponding kCluster object, and an error if there is any.
func (c *FakeKClusters) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1beta1.KCluster, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(kclustersResource, name), &v1beta1.KCluster{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.KCluster), err
}

// List takes label and field selectors, and returns the list of KClusters that match those selectors.
func (c *FakeKClusters) List(ctx context.Context, opts v1.ListOptions) (result *v1beta1.KClusterList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(kclustersResource, kclustersKind, opts), &v1beta1.KClusterList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1beta1.KClusterList{ListMeta: obj.(*v1beta1.KClusterList).ListMeta}
	for _, item := range obj.(*v1beta1.KClusterList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested kClusters.
func (c *FakeKClusters) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(kclustersResource, opts))
}

// Create takes the representation of a kCluster and creates it.  Returns the server's representation of the kCluster, and an error, if there is any.
func (c *FakeKClusters) Create(ctx context.Context, kCluster *v1beta1.KCluster, opts v1.CreateOptions) (result *v1beta1.KCluster, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(kclustersResource, kCluster), &v1beta1.KCluster{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.KCluster), err
}

// Update takes the representation of a kCluster and updates it. Returns the server's representation of the kCluster, and an error, if there is any.
func (c *FakeKClusters) Update(ctx context.Context, kCluster *v1beta1.KCluster, opts v1.UpdateOptions) (result *v1beta1.KCluster, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(kclustersResource, kCluster), &v1beta1.KCluster{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.KCluster), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeKClusters) UpdateStatus(ctx context.Context, kCluster *v1beta1.KCluster, opts v1.UpdateOptions) (*v1beta1.KCluster, error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateSubresourceAction(kclustersResource, "status", kCluster), &v1beta1.KCluster{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.KCluster), err
}

// Delete takes name of the kCluster and deletes it. Returns an error if one occurs.
func (c *FakeKClusters) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteActionWithOptions(kclustersResource, name, opts), &v1beta1.KCluster{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeKClusters) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(kclustersResource, listOpts)

	_, err := c.Fake.Invokes(action, &v1beta1.KClusterList{})
	return err
}

// Patch applies the patch and returns the patched kCluster.
func (c *FakeKClusters) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1beta1.KCluster, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(kclustersResource, name, pt, data, subresources...), &v1beta1.KCluster{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.KCluster), err
}
